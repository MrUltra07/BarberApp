@using BarberApp.ViewModels
@model List<AppointmentViewModel>
@{
    ViewBag.Title = "Admin Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<h2>Randevu Kazançları</h2>

@if (Model.FirstOrDefault()?.IsAdmin == true)
{
    <h3>Çalışan Kazanç Grafiği</h3>
    <div id="employee-income-chart" class="d-flex" >
        <!-- Çalışan Kazanç Grafiği -->
        <canvas id="employeeChart" class="w-50" style="height: 150px; margin-right: 20px;"></canvas>
        <canvas id="skillChart" class="w-50" style="height: 150px; width:50%"></canvas>
    </div>
}
else
{
    <h3>Skill-Kazanç Grafiği</h3>
    <div id="skill-income-chart">
        <!-- Skill-Kazanç Grafiği -->
        <canvas id="skillChart" style="height: 150px;"></canvas>
    </div>
}

<table>
    <thead>
        <tr>
            <th>Aylık Kazanç</th>
            <th>Toplam Kazanç</th>
            <th>Detaylar</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var appointment in Model)
        {
            <tr>
                <td>@appointment.MonthYear</td>
                <td>@appointment.TotalIncome.ToString("C")</td>
                <td>
                    <table>
                        <thead>
                            <tr>
                                <th>İşin Adı</th>
                                <th>Kazanç</th>
                                <th>Tarih</th>
                                <th>Çalışan</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var kazanc in appointment.KazancData)
                            {
                                <tr>
                                    <td>@kazanc.SkillName</td>
                                    <td>@kazanc.Kazanc.ToString("C")</td>
                                    <td>@kazanc.Date</td>
                                    @if (Model.FirstOrDefault()?.IsAdmin == true)
                                    {
                                        <td>@kazanc.EmployeeName</td>
                                    }
                                    else
                                    {
                                        <td>@(kazanc.EmployeeName != null ? kazanc.EmployeeName : "N/A")</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Script {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
}

@section Scripts {
    <script>
        // Çalışan kazançlarını almak için API çağrısı
        fetch('/Admin/chart-data') // controllerAdı kısmını doğru controller adı ile değiştirin
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(data => {
                console.log(data); // Gelen veriyi konsola yazdır

                const employeeNames = [...new Set(data.flatMap(x => x.kazancData.map(k => k.employeeName)))];

                // Çalışan kazanç verileri
                const employeeData = employeeNames.map(employee => ({
                    label: employee,
                    data: data.map(month => month.kazancData.filter(k => k.employeeName === employee)
                        .reduce((total, k) => total + k.kazanc, 0)),
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }));

                // Skill kazanç verileri
                const skillData = {
                    labels: data.map(x => x.monthYear),
                    datasets: [{
                        label: 'Skill Kazancı',
                        data: data.map(x => x.kazancData.reduce((total, k) => total + k.kazanc, 0)),
                        backgroundColor: 'rgba(153, 102, 255, 0.6)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                };

                // Admin kullanıcıları için grafik oluşturma
                if (@(Model.FirstOrDefault()?.IsAdmin.ToString().ToLower())) {
                    var ctxEmployee = document.getElementById('employeeChart').getContext('2d');
                    new Chart(ctxEmployee, {
                        type: 'bar',
                        data: {
                            labels: data.map(x => x.monthYear),
                            datasets: employeeData
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                }

                // Skill grafik oluşturma
                var ctxSkill = document.getElementById('skillChart').getContext('2d');
                new Chart(ctxSkill, {
                    type: 'bar',
                    data: skillData,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            })
            .catch(error => {
                console.error('API çağrısında hata:', error);
            });
    </script>
}
